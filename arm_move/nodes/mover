#!/usr/bin/env python
""" 
Adds a collision object representing the table to the planning scene
Loads a list of waypoints from the parameter server (if waypoints don't exist, the list is empty)

Reset service:
    - takes position and orientation of realsense box and creates/moves the realsense box to the appropriate location
    - moves the robot to its home position without hitting the box ('Home' is predefined by the SDK)
    - takes a parameter that determines if the waypoints are cleared or not

step service:
    - moves the robot to a user-specified position and also a gripper state (open/closed)
    - if the motion plan succeeds, it adds the position to the list of waypoints, storing it in parameter server, and executes the plan
    - if motion plan fails, it's okay, use MoveItErrorCode to determine why

follow service:
    - has robot move to each waypoint in sequence   
    - follow should contain an option that determines if the cycle should be repeated or run just once


SERVICES:
  + reset ??? ~ does stuff
"""

import sys
import rospy
from std_srvs.srv import EmptyResponse
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from arm_move.srv import reset, step, follow, resetResponse
from moveit_commander.conversions import pose_to_list


class Mover:
    def __init__(self):
        moveit_commander.roscpp_initialize(sys.argv)

        rospy.init_node('mover')

        self.robot = moveit_commander.RobotCommander()
        self.move_gripper = moveit_commander.MoveGroupCommander("interbotix_gripper")

        self.scene = moveit_commander.PlanningSceneInterface()

        self.group_name = "interbotix_arm"
        self.move_group = moveit_commander.MoveGroupCommander(self.group_name)

        self.display_trajectory_publisher = rospy.Publisher("/move_group/display_planned_path",moveit_msgs.msg.DisplayTrajectory,queue_size=20)

        # Variables
        self.box_name = ""
        self.waypoints = []

        # Create services
        self.reset = rospy.Service("reset", reset, self.reset_func) # Create reset service
        self.step = rospy.Service("step", step, self.step_func) # Create step service
        self.follow = rospy.Service("follow", follow, self.follow_func) # Create follow service

        self.add_table()


    def wait_for_state_update(self, box_is_known=False, box_is_attached=False, timeout=4):
        box_name = self.box_name
        scene = self.scene

        start = rospy.get_time()
        seconds = rospy.get_time()
        while (seconds - start < timeout) and not rospy.is_shutdown():
            # Test if the box is in attached objects
            attached_objects = scene.get_attached_objects([box_name])
            is_attached = len(attached_objects.keys()) > 0

            # Test if the box is in the scene.
            # Note that attaching the box will remove it from known_objects
            is_known = box_name in scene.get_known_object_names()

            # Test if we are in the expected state
            if (box_is_attached == is_attached) and (box_is_known == is_known):
                return True

            # Sleep so that we give other threads time on the processor
            rospy.sleep(0.1)
            seconds = rospy.get_time()

        # If we exited the while loop without returning then we timed out
        return False

    def reset_func(self, data):
        """
        Takes position and orientation of realsense box and creates/moves it
        to appropriate location.

        Move robot to pre-defined 'home' position without hitting box.

        Take parameter that determines if waypoints are cleared or not.
        """
        
        self.add_obstacle()

        rospy.logerr(self.move_group.get_current_pose())

        #use name target --> Home, Sleep, Close, Open
        self.move_group.set_named_target("Home")
        self.move_group.go()

        rospy.logerr(self.move_group.get_current_pose())
        
        return resetResponse() 

    def step_func(self, data):
        #true/false for gripper open/close
        x = data.coordinates.x
        y = data.coordinates.y
        z = data.coordinates.z
        xyz = [x,y,z]

        self.move_group.set_position_target(xyz)
        success, traj_msg, planTime, err = self.move_group.plan()
        self.move_group.execute(traj_msg, wait='true')

        self.move_group.go(wait='true')
        self.move_group.stop()

        if data.gripper == True:
            self.move_gripper.set_named_target('Closed')
        elif data.gripper == False:
            self.move_gripper.set_named_target('Open')
            
        self.move_gripper.go(wait='true')
        self.move_gripper.stop()

        # Save waypoints to parameter server if legal
        if err.val == 1:
            current_robot_pose = [xyz[0], xyz[1], xyz[2], data.gripper]
            self.waypoints.append(current_robot_pose)
            #rospy.set_param('arm_waypoints', self.waypoints)
        else:
            rospy.logerr("Sorry, that pose is too extreme for me! I haven't been practicing my yoga. Try another pose.")

        return err.val

    def follow_func(self, repeat):
        #true/false for repeat
        #follow_waypoints = rospy.get_param('arm_waypoints')
        follow_waypoints = rospy.get_param('/waypoints')
        repeat = repeat.repeat

        if repeat == True:
            while True:
                for wp in follow_waypoints:
                    xyz = [wp[0], wp[1], wp[2]]
                    grip = wp[3]
                    self.move_group.set_position_target(xyz)
                    success, traj_msg, planTime, err = self.move_group.plan()
                    self.move_group.execute(traj_msg, wait='true')
                    self.move_group.go(wait='true')
                    self.move_group.stop()

                    if grip == True:
                        self.move_gripper.set_named_target('Closed')
                    elif grip == False:
                        self.move_gripper.set_named_target('Open')
                    
                    self.move_gripper.go(wait='true')
                    self.move_gripper.stop()

        elif repeat == False:
            for wp in follow_waypoints:
                xyz = [wp[0], wp[1], wp[2]]
                grip = wp[3]
                self.move_group.set_position_target(xyz)
                success, traj_msg, planTime, err = self.move_group.plan()
                self.move_group.execute(traj_msg, wait='true')
                self.move_group.go(wait='true')
                self.move_group.stop()

                if grip == True:
                    self.move_gripper.set_named_target('Closed')
                elif grip == False:
                    self.move_gripper.set_named_target('Open')
                
                self.move_gripper.go(wait='true')
                self.move_gripper.stop()
        
        return []

    def add_table(self, timeout=5):
        rospy.sleep(2)

        scene = self.scene
        box_pose = geometry_msgs.msg.PoseStamped()
        box_pose.header.frame_id = "world"
        box_pose.pose.orientation.w = 1.0
        box_pose.pose.position.x = 0
        box_pose.pose.position.y = 0
        box_pose.pose.position.z = -0.025
        self.box_name = "table"
        scene.add_box(self.box_name, box_pose, size=(1,1,0.05))

        return self.wait_for_state_update(box_is_known=True, timeout=timeout)

    def add_obstacle(self, timeout=4):

        scene = self.scene
        obst_pose = geometry_msgs.msg.PoseStamped()
        obst_pose.header.frame_id = "world"
        obst_pose.pose.orientation.w = 1.0
        obst_pose.pose.position.x = 0
        obst_pose.pose.position.y = 0.135
        obst_pose.pose.position.z = 0.025
        self.obst_name = "realsense"
        scene.add_box(self.obst_name, obst_pose, size=(0.09,0.14,0.05))

        return self.wait_for_state_update(box_is_known=True, timeout=timeout)

if __name__ == '__main__':
    # Instantiate class
    Mover()

    # Spin() simply keeps python from exiting until this node is stopped
    rospy.spin()